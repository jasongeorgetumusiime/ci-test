user www-data;
worker_processes auto;

error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024;
  accept_mutex off;
  multi_accept on;
}

http {
  # access_log /dev/stdout;
  # error_log /dev/stdout;

  access_log /var/log/nginx/access.log combined;
  include /etc/nginx/mime.types;
  default_type application/octet-stream;
  sendfile on;

  index index.html index.htm;

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/tmp/gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    # server 192.168.0.7:8000 fail_timeout=0;
  }

  server {
    # if no Host match, close the connection to prevent host spoofing
    listen 80 default_server;
    # listen [::]:80 default_server;
    return 444;
  }

  server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen 80;
    # listen [::]:80;
    client_max_body_size 4G;

    # set the correct host(s) for your site
    server_name localhost;
    # server_name example.com www.example.com;
    server_tokens off; # Best practice

    keepalive_timeout 5;

    # path for static files
    root /var/www/html;

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      # Port may vary with hypercorn configuration
      proxy_pass http://127.0.0.1:8000;
    }

    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root  /var/www/html;
    }
  }
}